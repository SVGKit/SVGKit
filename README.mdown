# SVGKit

SVGKit is a Cocoa framework for rendering SVG files natively: it's fast and powerful.

## Versions:

  - master - Current branch in development. Has code from SVGKit's 1.1.0  branch - https://github.com/SVGKit/SVGKit/tree/1.1.0 as well as a lot of enhancements including OS X support and "modern" Objective-C syntax.
  - v1.x = current "in development" branch with latest changes, fixes, features
  - v1.1.0 - Branch that was used to merge changes from SVGKit's 1.1.0 branch from SVGKit's master. __Now defunct:__ It has been merged with master. Occasionally the branch will be used as a staging branch for merges to go back to master.
  - v1.0 = Major refactor/re-write at start of 2013, approximately 90% coverage of the SVG spec. Stable and quite fast - https://github.com/SVGKit/SVGKit/tree/v1.0
  - arc - Branch that has the iOS and OS X project use Automatic Reference Counting. __Now defunct:__ it has been merged back to master.
  - namespaces - Branch that has the SVGKit headers better designed to work with OS X. __Now defunct:__ it has been merged back to master.
  - toSVGKit - Branch that contains staged changes to put back into SVGKit's 1.1.0 branch.
  - patterns - Branch for working on pattern support. based off of SVGKit's 1.1.0 branch as opposed to my master. Parts have been merged back to master.
  - noAsserts - Most of the NSAsserts are changed into DDLogErrors.
  - colorFlags - The SVGColor struct has a flag for the status of the creation of the color struct.
  - cleanup - Merging my master to the original version's 1.x branch.

# Apps that use SVGKit

New for 2014 - we have a wiki page listing known apps that use SVGKit, and how they're using it:

* https://github.com/SVGKit/SVGKit/wiki/Apps-using-SVGKit

## Advanced Features (this branch/fork only!)

  - use an SVG just like it's a normal PNG file: use SVGKFastImageView like it's UIImageView/NSImageView:
  - load an SVG from web, or from disk
  - search an SVG file for particular tags / nodes / elements
  - automatic scaling of your SVG to fit their on-screen size (often reduces the memory required)
  - Access to the DOM Document Object Model
  - Retrieve any part of your SVG document positioned correctly in space
  - detailed information on whether and WHY parsing failed

iPhone/iPad (iOS) Info
===

# Getting Started

## Run the Demo

1. Open up "Demo-iOS.xcodeproj", and run it (on simulator or device). Try different SVG's. Zoom, pan, and (with the Monkey only:) hit the "Animate" button. Tap the images to see bounding-boxes / hit dectection (might need you to hit the Debug button first)
1. If you have ANY problems building the library and embedding it in your app, compare your build settings to the Demo-iOS build settings - if something's different, it's probably the problem.

## Build the static library (automatic)

We use this build script to automatically build ALL versions of the library at once, and ship them as a single file: http://stackoverflow.com/questions/3520977/build-fat-static-library-device-simulator-using-xcode-and-sdk-4/3647187#3647187

It's all setup already, all you need to do is:

1. Open "SVGKit-iOS.xcodeproj", and Build it (cmd-B)
3. in left navbar, scroll to bottom, and open the "Products" section
4. right click the library ("libSVGKitBLAHBLAH.a") and select "show in finder"
5. GO UP ONE FOLDER
6. select the "Debug-universal" (or Release-universal if you were building in Release mode) folder
7. Drag/drop the .a file and the "usr" folder into your project (select the "Copy files" checkbox)
8. In Build Settings, select "Other Linker Flags" and add "-ObjC"
9. Edit your build settings and set "C/C++ Compiler Version" = "LLVM Compiler"
7. Edit your build settings and add "Other Linker Flags" = "-ObjC"
10. Add ALL the frameworks and 3rd party libraries listed below (go to "Build Phases", and "Link Binary with Libraries"):
  - CoreText
  - CoreImage
  - libxml2.dylib
  - QuartzCore
  - CoreGraphics
  - UIKit


Everything else is automatic.

However, early versions of Xcode5 have a major bug, affecting all libraries:

1. Xcode 5: Apple will create a hardlink to your local hard-disk, breaking your project for all your co-workers. This is a new bug added for Xcode5 :(
2. Xcode5: in Build Settings, scroll down to the "Library Search Paths"
3. Xcode5: double click it. If it has any absolute paths, chop off the start, and replace the start with ""$(SRCROOT)/"" (note the quotes inside are necessary - Apple's Xcode has another bug where it will fail to build if you have spaces in any of your folder names!)

Instead of fixing the bug, in latest Xcode 5.0.2, Apple has simply made it allow two copies of every Search Path. Hmm.

## Recipes for using the library

Here are some posts on using SVGKit, with advice on which methods to use and why:

  - GETTING STARTED, plus NEW FEATURES:  http://t-machine.org/index.php/2012/12/31/svgkit-2013-usage/
  - QUICK RECIPES for common uses: Â http://t-machine.org/index.php/2013/01/02/svgkit-2013-recipes/
     - additiona: How to scale an SVG image on screen: http://t-machine.org/index.php/2013/04/14/svgkit-scaling-svg-images/
  - CONTRIBUTING to the project, CORE ARCHITECTURE: http://t-machine.org/index.php/2012/12/31/svgkit-2013-development/
 
  - (November 2013): New (experimental) feature - writing SVG's out to disk, preserving any changes you made programmatically: http://t-machine.org/index.php/2013/11/17/svgkit-programmatic-editing-of-svg-files-on-ios/


### I get a crash with "unrecognized selector" ?

If you get this error:

"+[NSCharacterSet SVGWhitespaceCharacterSet]: unrecognized selector sent to class "

... you're probably building the Static Library, but forgot to do the step below:

"Edit your build settings and add "Other Linker Flags" = "-ObjC""

OS X Info
===

### Ultra-quick 'getting started'
-----

Open the project "Demo-OSX", select either Demo-OSX, ImageRepTest, or ImageRepTest-NS, build and run.

To use SVGKit, either create and display the image on screen:

    [view addSubview: [[SVGKLayeredImageView alloc] initWithSVGKImage: [SVGKImage imageNamed:@"mySVGfile.svg"]]];
    
or load an image and convert it to an NSImage or NSBitmapImageRep object:

    NSImage *newImage = [SVGKImage imageNamed:@"mySVGfile"].NSImage;
    NSBitmapImageRep *newImageRep = [SVGKImage imageNamed:@"mySVGfile"].bitmapImageRep;
    
or load the SVG using NSImage:

    NSImage *svgImage = [NSImage imageNamed:@"mySVGfile.svg"];

Note that there is a naming conflict with one of OS X's headers, specifically a struct called `Comment` in the AIFF header. The following code __must be included in any source file that will include SVGKit headers, *before* any other header includes.__ A good place to put it would be in the prefix header.

    #define Comment AIFFComment
    #include <CoreServices/CoreServices.h>
    #undef Comment

Also note that using Objective C modules support introduced in Xcode 5 may cause similar build failures.

## Usage - OS X

There are three ways to make SVGKit run on OS X:
  1. Use SVGKImageRep. Load the SVGKit framework via direct linking or NSBundle. You can then use NSImage to load SVGs like any other NSImage-capable file. Note that it has the same limitations as SVGKFastImageView.
  1. SVGKLayeredImageView is the suggested way to display SVGs on OS X. Note that if you add the view subclass via Interface Builder, the framework will complain when the view is inited.
  1. SVGKFastImageView is another subclass of NSView that you can use. Note that there currently is a bug that text will be upside-down unless the CALayer is also being used by a SVGKLayeredImageView. Also, like the iOS version, scaling and gradients don't work.

## Installation

Note that you can only build SVGKit as a framework (which will include the Lumberjack code as a subframework) For loading the framework at run time, add the following line to the `rpath` linker options:

     @loader_path/../Frameworks

### SVGKit

There is a sample project you can examine which copies the SVGKit framework into the Frameworks subdirectory of the app and sets the runpath to @loader_path/../Frameworks to load the framework. To include an SVGKit header is the same as any other OS X framework, by including &lt;SVGKit/HeaderName.h&gt;.

### SVGKImageRep

To use SVGKImageRep, either just link to SVGKit, or load the SVGKit framework with NSBundle. Both methods will add the SVGKImageRep class to the NSImageRep classes list.
